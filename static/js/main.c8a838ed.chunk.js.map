{"version":3,"sources":["assets/main.png","assets/flags/greece.svg","assets/flags/uk.svg","texts.js","utilities.js","components/App.js","components/Key.js","components/Game.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["module","exports","texts","el","title","createNew","language","copyURLsuccess","copyURLfail","homepage","copyURL","information","en","history","createHashHistory","createNewKey","keyArray","initiator","Math","floor","random","elemsArray","push","length","index","splice","array","init","createKey","lang","key","myJSON","JSON","stringify","encoded","window","btoa","encodeKey","console","log","App","useState","setLang","className","style","animation","src","main","alt","onClick","gr","uk","href","rel","target","Key","props","keyMap","map","i","classValue","Game","addToast","useToasts","setKey","match","params","prevID","value","ref","useRef","useEffect","current","usePrevious","id","string","decodedString","atob","parse","decodeBase64","to","navigator","clipboard","writeText","location","appearance","autoDismiss","err","copyToClipboard","NotFound","Boolean","hostname","ReactDOM","render","StrictMode","autoDismissTimeout","placement","exact","path","component","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,sQCA9BC,EAAQ,CACjBC,GAAI,CACAC,MAAO,mFACPC,UAAW,0DACXC,SAAU,uCACVC,eAAgB,8XAChBC,YAAa,wGACbC,SAAU,uCACVC,QAAS,6DACTC,YAAa,sEAEjBC,GAAI,CACAR,MAAO,aACPC,UAAW,UACXC,SAAU,WACVC,eAAgB,wEAChBC,YAAa,8BACbC,SAAU,WACVC,QAAS,WACTC,YAAa,gB,gBCjBRE,E,MAAUC,KAuBhB,SAASC,IAEZ,IAAKC,EAAW,GAEVC,EADaC,KAAKC,MAAsB,EAAhBD,KAAKE,UACF,OAAS,MAItCC,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKvF,IAHe,SAAdJ,EAAwBI,EAAWC,KAAK,GAAKD,EAAWC,KAAK,GAGvDN,EAASO,OAAS,IAAI,CACzB,IAAMC,EAAQN,KAAKC,MAAMD,KAAKE,SAAWC,EAAWE,QACpDP,EAASM,KAAKD,EAAWG,IACzBH,EAAWI,OAAOD,EAAO,GAQ7B,MALkB,CACdE,MAAOV,EACPW,KAAMV,G,MCXd,IAAMW,EAAY,SAACC,GACId,IAAnB,IACMC,EDxBH,WAEH,IAAIc,EAAMf,IAENgB,EAASC,KAAKC,UAAUH,GACtBI,EAAUC,OAAOC,KAAKL,GAG5B,OAFAD,EAAG,eAAOA,EAAP,CAAYI,YCkBEG,GACjBC,QAAQC,IAAIvB,GACZH,EAAQS,KAAR,eAAqBO,EAArB,YAA6Bb,EAASkB,WAG3BM,EAlCf,WAAgB,IAAD,EAEaC,mBAAS,MAFtB,mBAEJZ,EAFI,KAEEa,EAFF,KAIX,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKA,UAAU,cACX,0BAAMC,MAAO,CAACC,UAAU,qBAAD,OAAkD,EAA3B3C,EAAM2B,GAAMzB,MAAMmB,OAAzC,gDAAmGrB,EAAM2B,GAAMzB,QAE1I,yBAAK0C,IAAKC,IAAMJ,UAAU,aAAaK,IAAI,SAC3C,yBAAKL,UAAU,WACX,4BAAQA,UAAU,aAAaM,QAAS,kBAAMrB,EAAUC,KAAQ3B,EAAM2B,GAAMxB,WAC5E,yBAAKsC,UAAU,YACX,2BAAIzC,EAAM2B,GAAMvB,SAAhB,KACA,6BACI,4BAAQ2C,QAAS,kBAAMP,EAAQ,QAAO,yBAAKC,UAAqB,OAATd,EAAiB,SAAW,GAAIiB,IAAKI,IAAIF,IAAI,gBACpG,4BAAQC,QAAS,kBAAMP,EAAQ,QAAO,yBAAKC,UAAqB,OAATd,EAAiB,SAAW,GAAIiB,IAAKK,IAAIH,IAAI,gBAIhH,uBAAGL,UAAU,QAAQS,KAAK,iDAAiDC,IAAI,sBAAsBC,OAAO,UAAUpD,EAAM2B,GAAMlB,gB,gBCSnI4C,G,MAjCH,SAACC,GAAW,IAEZC,EAAWD,EAAXC,OAKR,OAHAnB,QAAQC,IAAIkB,GAIR,yBAAKd,UAAU,eACTc,EAAO/B,MACL,yBAAKiB,UAAU,OACX,yBAAKA,UAAU,cACP,yBAAKA,UAAU,cACVc,EAAO/B,MAAMgC,KAAI,SAACvD,EAAIwD,GACf,IAAIC,EAKR,OAJoB,IAAPzD,EAAYyD,EAAa,OAClB,IAAPzD,EAAYyD,EAAa,MAClB,IAAPzD,EAAYyD,EAAa,UAClB,IAAPzD,IAAYyD,EAAa,YAC/B,0BAAM9B,IAAK6B,EAAGhB,UAAS,sBAAiBiB,QAEnD,0BAAMjB,UAAS,oBAAec,EAAO9B,KAAtB,UACf,0BAAMgB,UAAS,oBAAec,EAAO9B,KAAtB,aACf,0BAAMgB,UAAS,oBAAec,EAAO9B,KAAtB,WACf,0BAAMgB,UAAS,oBAAec,EAAO9B,KAAtB,eAIjC,Q,MC+CCkC,MAxEF,SAACL,GAAW,IAEbM,EAAaC,sBAAbD,SAFY,EAMErB,mBAFH,CAACP,QAAS,KAJT,mBAMbJ,EANa,KAMRkC,EANQ,OAOCR,EAAMS,MAAMC,OAAzBrC,EAPY,EAOZA,KACFsC,EAkDV,SAAqBC,GAGjB,IAAMC,EAAMC,mBAQZ,OALAC,qBAAU,WACRF,EAAIG,QAAUJ,IACb,CAACA,IAGGC,EAAIG,QA7DIC,CARK,EAONC,IAGdH,qBAAU,WAAO,IACLG,EAAOlB,EAAMS,MAAMC,OAAnBQ,GACR,GAAIP,IAAWO,EAAI,CACf,IAAM1D,EHhBX,SAAsB2D,GACzB,IAAMC,EAAgBzC,OAAO0C,KAAKF,GAElC,OADoB3C,KAAK8C,MAAMF,GGcNG,CAAaL,GAC9BpC,QAAQC,IAAIvB,GACZgD,EAAOhD,MAEZ,CAACwC,EAAMS,MAAMC,OAAQC,IAwBxB,OACI,yBAAKxB,UAAU,OACX,4BAAQA,UAAU,eACd,kBAAC,IAAD,CAAMA,UAAU,OAAOqC,GAAI,KAAM9E,EAAM2B,GAAMpB,UAC7C,6BACI,4BAAQwC,QAAS,kBA3Bf,WACd,IAAInB,EAAMf,IAENgB,EAASC,KAAKC,UAAUH,GACtBI,EAAUC,OAAOC,KAAKL,GAC5BD,EAAG,eAAOA,EAAP,CAAYI,YACfI,QAAQC,IAAIT,GACZjB,EAAQS,KAAR,eAAqBO,EAArB,YAA6BC,EAAII,UAEjC8B,EAAOlC,GAkB4BF,KAAkB1B,EAAM2B,GAAMxB,WACrD,4BAAQ4C,QAAS,kBAhBT,WACpB,IACIgC,UAAUC,UAAUC,UAAUhD,OAAOiD,SAAShC,MAC9CU,EAAS5D,EAAM2B,GAAMtB,eAAgB,CAAE8E,WAAY,UAAWC,aAAa,IAE/E,MAAMC,GACFzB,EAAS5D,EAAM2B,GAAMrB,YAAa,CAAE6E,WAAY,WAUjBG,KAAoBtF,EAAM2B,GAAMnB,WAG/D,8BACI,kBAAC,EAAD,CAAKmB,KAAMA,EAAM4B,OAAQ3B,OC/C1B2D,MAVf,WACI,OACI,yBAAK9C,UAAU,OACX,4BAAQA,UAAU,cACd,gD,OCMI+C,QACW,cAA7BvD,OAAOiD,SAASO,UAEe,UAA7BxD,OAAOiD,SAASO,UAEhBxD,OAAOiD,SAASO,SAAS1B,MACvB,2DCNN2B,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,gBAAD,CAAeC,mBAAoB,IAAMC,UAAW,gBAChD,kBAAC,IAAD,CAAQnF,QAASA,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,iBAAiBC,UAAWtC,IAC9C,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAW3D,IACjC,kBAAC,IAAD,CAAO0D,KAAK,IAAIC,UAAWV,QAK3CW,SAASC,eAAe,SD2GtB,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.c8a838ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main.9d579f75.png\";","module.exports = __webpack_public_path__ + \"static/media/greece.90595896.svg\";","module.exports = __webpack_public_path__ + \"static/media/uk.e5564902.svg\";","export const texts = {\n    el: {\n        title: 'Κωδική_oνομασία',\n        createNew: 'Νέο κλειδί',\n        language: 'Γλώσσα',\n        copyURLsuccess: 'Το URL αντιγράφηκε στο clipboard. Τώρα μπορείτε να το μοιράσετε στους συμπαίκτες σας',\n        copyURLfail: 'Σφάλμα αντιγραφής URL',\n        homepage: 'Αρχική',\n        copyURL: 'Αντιγραφή URL',\n        information: 'Πληροφορίες'\n    },\n    en: {\n        title: 'Code_names',\n        createNew: 'New key',\n        language: 'Language',\n        copyURLsuccess: 'URL is copied to clipboard. You can now share it with your co-players',\n        copyURLfail: 'Error while copying the URL',\n        homepage: 'Homepage',\n        copyURL: 'Copy URL',\n        information: 'Information'\n    }\n}","// Needed for passing history object and create redirects within redux actions\nimport createHashHistory from 'history/createHashHistory';\nexport const history = createHashHistory();\n\n\nexport function decodeBase64(string) {\n    const decodedString = window.atob(string);\n    const parsedValue = JSON.parse(decodedString);\n    return parsedValue;\n}\n\n\n// Encodes picked cards and starts a new game\nexport function encodeKey() {\n\n    let key = createNewKey();\n\n    var myJSON = JSON.stringify(key);\n    const encoded = window.btoa(myJSON);\n    key = {...key, encoded}\n\n    return key;\n}\n\n\nexport function createNewKey() {\n    // Define which team starts\n    let  keyArray = [];\n    const initNumber = Math.floor(Math.random() * 2);\n    const initiator = (initNumber) ? 'blue' : 'red';\n\n    // Create array of elements\n    // \"arr\" has 8 blue cards, 8 red, 7 neutral and 1 executor card. \n    let elemsArray = [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4];\n    // The last card depends on which team starts first (team who starts first has 1 more card)\n    (initiator === 'blue') ? elemsArray.push(1) : elemsArray.push(2);\n\n    // Create random map array\n    while (keyArray.length < 25) {\n        const index = Math.floor(Math.random() * elemsArray.length);\n        keyArray.push(elemsArray[index]);\n        elemsArray.splice(index, 1);\n    }\n\n    const keyObject = {\n        array: keyArray,\n        init: initiator\n    }\n\n    return keyObject;\n}","import React, { useState } from 'react';\nimport main from '../assets/main.png';\nimport gr from '../assets/flags/greece.svg';\nimport uk from '../assets/flags/uk.svg';\nimport { texts } from '../texts';\nimport { history, createNewKey, encodeKey } from '../utilities';\nimport '../styles/app.scss';\n\nfunction App() {\n    \n    const [lang, setLang] = useState('el');\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"typewriter\">\n                    <code style={{animation: `typing 2.5s steps(${texts[lang].title.length * 2}, end), blink-caret .75s step-end infinite`}}>{texts[lang].title}</code>\n                </div>\n                <img src={main} className=\"image-logo\" alt=\"logo\" />\n                <div className=\"actions\">\n                    <button className=\"create-key\" onClick={() => createKey(lang)}>{texts[lang].createNew}</button>\n                    <div className=\"language\">\n                        <p>{texts[lang].language}:</p>\n                        <div>\n                            <button onClick={() => setLang('el')}><img className={(lang === 'el') ? 'active' : ''} src={gr} alt=\"greek flag\"/></button>\n                            <button onClick={() => setLang('en')}><img className={(lang === 'en') ? 'active' : ''} src={uk} alt=\"uk flag\"/></button>\n                        </div>\n                    </div>\n                </div>\n                <a className=\"about\" href=\"https://github.com/aris-papadopoulos/codenames\" rel=\"noopener noreferrer\" target=\"_blank\">{texts[lang].information}</a>\n            </header>\n        </div>\n    );\n}\n\nconst createKey = (lang) => {\n    const encodedKey = createNewKey();\n    const keyArray = encodeKey(encodedKey);\n    console.log(keyArray);\n    history.push(`/key/${lang}/${keyArray.encoded}`);\n}\n\nexport default App;\n","import React from 'react';\nimport '../styles/key.scss';\n\n\n\nconst Key = (props) => {\n\n    const { keyMap } = props;\n\n    console.log(keyMap);\n\n\n    return (\n        <div className=\"key-wrapper\">\n            {(keyMap.array) ?\n                <div className=\"key\">\n                    <div className=\"key__outer\">\n                            <div className=\"key__inner\">\n                                {keyMap.array.map((el, i) => {\n                                        let classValue;\n                                        if      (el === 1) { classValue = 'blue' }\n                                        else if (el === 2) { classValue = 'red' }\n                                        else if (el === 3) { classValue = 'neutral' }\n                                        else if (el === 4) { classValue = 'executor' }\n                                    return <span key={i} className={`key-element ${classValue}`}></span>\n                                })}\n                                <span className={`indicator ${keyMap.init} top`}></span>\n                                <span className={`indicator ${keyMap.init} bottom`}></span>\n                                <span className={`indicator ${keyMap.init} left`}></span>\n                                <span className={`indicator ${keyMap.init} right`}></span>\n                            </div>\n                    </div>\n                </div>\n            : null}\n        </div>\n    );\n}\n\nexport default Key;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useToasts } from 'react-toast-notifications';\nimport { history, decodeBase64, createNewKey } from '../utilities';\nimport { texts } from '../texts';\nimport Key from './Key';\nimport '../styles/game.scss';\n\nconst Game = (props) => {\n    \n    const { addToast } = useToasts();\n    \n    const initialKey = {encoded: ''};\n\n    const [key, setKey] = useState(initialKey);\n    const { lang, id } = props.match.params;\n    const prevID = usePrevious(id);\n\n    useEffect(() => {\n        const { id } = props.match.params;\n        if (prevID !== id) {\n            const keyArray = decodeBase64(id);\n            console.log(keyArray)\n            setKey(keyArray);\n        }\n    }, [props.match.params, prevID]);\n    \n    const createKey = () => {\n        let key = createNewKey();\n\n        var myJSON = JSON.stringify(key);\n        const encoded = window.btoa(myJSON);\n        key = {...key, encoded}\n        console.log(key);\n        history.push(`/key/${lang}/${key.encoded}`);\n\n        setKey(key);\n    }\n\n    const copyToClipboard = () => {\n        try {\n            navigator.clipboard.writeText(window.location.href);\n            addToast(texts[lang].copyURLsuccess, { appearance: 'success', autoDismiss: true })\n        }\n        catch(err) {\n            addToast(texts[lang].copyURLfail, { appearance: 'error' })\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"Game-header\">\n                <Link className=\"link\" to={'/'}>{texts[lang].homepage}</Link>\n                <div>\n                    <button onClick={() => createKey(lang)}>{texts[lang].createNew}</button>\n                    <button onClick={() => copyToClipboard()}>{texts[lang].copyURL}</button>\n                </div>\n            </header>\n            <main>\n                <Key lang={lang} keyMap={key} />\n            </main>\n        </div>\n    );\n}\n\n// Hook - Used to keep prevProps on functional components\nfunction usePrevious(value) {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef();\n    \n    // Store current value in ref\n    useEffect(() => {\n      ref.current = value;\n    }, [value]); // Only re-run if value changes\n    \n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n\nexport default Game;\n","import React from 'react';\n\nfunction NotFound() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>Page not found</p>\n            </header>\n        </div>\n    );\n}\n\nexport default NotFound;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport Game from './components/Game';\nimport NotFound from './components/NotFound';\nimport { ToastProvider } from 'react-toast-notifications';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { history } from './utilities';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ToastProvider autoDismissTimeout={2000} placement={'bottom-right'}>\n            <Router history={history}>\n                <Switch>\n                    <Route exact path=\"/key/:lang/:id\" component={Game} />\n                    <Route exact path=\"/\" component={App} />\n                    <Route path=\"*\" component={NotFound} />\n                </Switch>\n            </Router>\n        </ToastProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}